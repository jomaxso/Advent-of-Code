name: Advent Calendar Door Opener - Daily from Dec 1 to Dec 25

on:
  schedule:
    - cron: '0 0 1-25 12 *'  # Runs every day from Dec 1 to Dec 25 at midnight
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      year:
        description: 'Year'
        required: true
      day:
        description: 'Day'
        required: true

jobs:
  create-advent-day:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set date variables
        id: set-date
        run: |
          if (-not ${{ github.event.inputs.year }}) {
            echo "year=$(Get-Date -Format yyyy)" >> $env:GITHUB_ENV
          } else {
            echo "year=${{ github.event.inputs.year }}" >> $env:GITHUB_ENV
          }
          if (-not ${{ github.event.inputs.day }}) {
            echo "day=$(Get-Date -Format dd)" >> $env:GITHUB_ENV
          } else {
            echo "day=${{ github.event.inputs.day }}" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Check if Advent of Code has started
        if: github.event_name == 'schedule'
        run: |
          if ((Get-Date) -lt (Get-Date -Year ${{ env.year }} -Month 12 -Day 01) -or (Get-Date) -gt (Get-Date -Year ${{ env.year }} -Month 12 -Day 25))) { 
            Write-Host "Advent of Code ${{ env.year }} has not started yet. Please try again on December 1st." 
            exit 1 
          }
        shell: pwsh

      - name: Create the new Advent Day
        run: .\create-advent-day.ps1 ${{ env.year }} ${{ env.day }}
        shell: pwsh

      - name: Set up Git
        run: |
          $user = if ($env:USER) { $env:USER } else { 'github-actions' } 
          $email = if ($env:EMAIL) { $env:EMAIL } else { 'github-actions@github.com' }   
          git config --global user.name $user 
          git config --global user.email $email
        shell: pwsh
        env:
          USER: ${{ secrets.GIT_USER }}
          EMAIL: ${{ secrets.GIT_EMAIL }}
          
      - name: Create GitHub label 
        run: |
          $randomColorForYear = (Get-Random -Minimum 0 -Maximum 16777215).ToString("X6") 
          $randomColorForMain = (Get-Random -Minimum 0 -Maximum 16777215).ToString("X6") 
          gh label create "${{ env.year }}" --color "#$randomColorForYear" --description "Label for Advent of Code Year ${{ env.year }}"
          gh label create "Advent of Code" --color "#$randomColorForMain" --description "Label for Advent of Code issues"
        shell: pwsh 
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create GitHub issue
        id: create-issue
        run: |
          gh issue create --label "Advent of Code, ${{ env.year }}" --title "Advent of Code ${{ env.year }} - Day ${{ env.day }}" --body "This issue tracks the solution for [Advent of Code ${{ env.year }} - Day ${{ env.day }}](https://adventofcode.com/${{ env.year }}/day/${{ env.day }})."
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get issue number
        id: get-issue-number
        run: |
          $issue_number = gh issue list --search "Advent of Code ${{ env.year }} - Day ${{ env.day }}" --json number --jq ".[0].number"
          echo "ISSUE_NUMBER=$issue_number" >> $env:GITHUB_ENV 
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set branch name
        run: echo "BRANCH_NAME=issue-${{ env.ISSUE_NUMBER }}" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Commit and push changes
        run: |
          $currentDate = Get-Date -Format "dd. MMMM"
          git add .
          git commit -m "Automated commit for new Advent Day on $currentDate. See issue #${{ env.ISSUE_NUMBER }}. Branch: $env:BRANCH_NAME."
          git push origin main
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create branch for issue
        run: |
          git checkout -b $env:BRANCH_NAME 
          git push --set-upstream origin $env:BRANCH_NAME
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}